# -*- coding: utf-8 -*-
"""ML Placement Training Capstone Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17XzyqzHTo2xg7yD1I0dcBYKTrhLlH2Ip

# Employee salary prediction

* uses linear regression
* SVR
* random forest

## s1: explore the dataset

### imports and loading
"""

import pandas as pd
import numpy as np
df = pd.read_csv("/content/employee_attrition_data.csv")

"""### checking head, tail, stats"""

print(df.head())
print(df.tail())
print(df.describe())

"""### checking duplicate and null values"""

print(df.isnull().sum(),"\n")
print(df.duplicated().sum())

"""### remove unwanted columns"""

df.drop(columns='Employee_ID')
df.head()

"""### plotting"""

!pip install matplotlib

import matplotlib.pyplot as plt
df['Gender'].value_counts().plot(kind='pie')
plt.ylabel('')
plt.title("Gender count of employees")
plt.show()

df.groupby("Job_Title")['Salary'].mean().sort_values(ascending=False).plot(kind='line')
plt.xlabel('Job Title ')
plt.ylabel('Average Salary')
plt.title("Average Salary by Job Title")
plt.show()

df.groupby(["Department","Promotion_Last_5Years"])["Salary"].mean().reset_index()
df.head()

X = df[["Years_at_Company","Satisfaction_Level","Average_Monthly_Hours"]]
y = df["Salary"]

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

import seaborn as sns
correlation_matrix = df.corr(numeric_only=True)
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Variables')
plt.show()

"""### training"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

import joblib
joblib.dump(scaler, "scaler.pkl")
X_test_scaled = scaler.transform(X_test)

import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error
def results(predictions):
  print("mean absolute error: ",mean_absolute_error(y_test,predictions))
  print("mean squared error: ",mean_squared_error(y_test,predictions))

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train_scaled,y_train)
predictions = lr.predict(X_test_scaled)
results(predictions)

from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVR
svrmodel = SVR()

param_gridsvr = {
    'C':[0.1,1,10],
    'epsilon':[0.1,0.2,0.5],
    'kernel':['linear','poly','rbf'],
    'degree':[2,3,4]
}
gridsvr = GridSearchCV(svrmodel,param_gridsvr,cv=5)
gridsvr.fit(X_train_scaled,y_train.values.ravel())

from sklearn.ensemble import RandomForestRegressor
rfmodel = RandomForestRegressor()
param_gridrfr = {
    "n_estimators": [2,3,4,5,6],
    "max_depth":[5,10,15]
}
gridrfr = GridSearchCV(rfmodel,param_gridrfr,cv=5)
gridrfr.fit(X_train_scaled,y_train.values.ravel())

gridrfr.best_params_
predictionofrfr = gridrfr.predict(X_test_scaled)
results(predictionofrfr)

lr
joblib.dump(lr,"model.pkl")

